/**
 * Teste do Sistema de Preenchimento Autom√°tico CORRIGIDO
 * Valida se o trigger de 1 d√≠gito est√° funcionando corretamente
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function testPreenchimentoCorrigido() {
  console.log('üß™ TESTE: Sistema de Preenchimento Autom√°tico CORRIGIDO');
  console.log('=' .repeat(60));

  try {
    // 1. Verificar se h√° equipamentos no banco
    console.log('\nüì¶ Verificando equipamentos no banco...');
    const equipResponse = await fetch('http://localhost:5000/api/equipamentos', {
      headers: { 'Authorization': 'Bearer fake-token-for-dev' }
    });
    
    if (equipResponse.ok) {
      const equipData = await equipResponse.json();
      console.log(`‚úÖ Equipamentos encontrados: ${equipData.capsulas?.length || 0} c√°psulas, ${equipData.cilindros?.length || 0} cilindros`);
      
      // Verificar numera√ß√£o 1-8
      console.log('\nüî¢ Verificando numera√ß√£o simplificada:');
      if (equipData.capsulas) {
        equipData.capsulas.forEach(cap => {
          console.log(`   C√°psula ${cap.codigo}: ${cap.peso}g (${cap.material || 'N/A'})`);
        });
      }
      if (equipData.cilindros) {
        equipData.cilindros.forEach(cil => {
          console.log(`   Cilindro ${cil.codigo}: ${cil.peso}g, ${cil.volume}cm¬≥ (${cil.tipo})`);
        });
      }
    } else {
      console.log('‚ùå Erro ao buscar equipamentos');
      return;
    }

    // 2. Verificar hooks corrigidos
    console.log('\nüîß Verificando hooks de preenchimento autom√°tico...');
    
    // Verificar se o arquivo foi corrigido
    const { stdout } = await execAsync('grep -n "length >= 1" client/src/hooks/useEquipmentAutofill.ts');
    const linhas = stdout.trim().split('\n');
    console.log(`‚úÖ Triggers corrigidos para 1 d√≠gito: ${linhas.length} ocorr√™ncias encontradas`);
    
    linhas.forEach(linha => {
      console.log(`   ${linha}`);
    });

    // 3. Verificar se n√£o h√° mais triggers de 3 d√≠gitos
    try {
      const { stdout: triggers3 } = await execAsync('grep -n "length >= 3" client/src/hooks/useEquipmentAutofill.ts');
      if (triggers3.trim()) {
        console.log('‚ö†Ô∏è  PROBLEMA: Ainda h√° triggers de 3 d√≠gitos!');
        console.log(triggers3);
      } else {
        console.log('‚úÖ Todos os triggers de 3 d√≠gitos foram removidos');
      }
    } catch (error) {
      console.log('‚úÖ Nenhum trigger de 3 d√≠gitos encontrado (esperado)');
    }

    // 4. Verificar se as calculadoras usam os hooks
    console.log('\nüßÆ Verificando uso dos hooks nas calculadoras...');
    
    const calculadoras = [
      'client/src/components/laboratory/density-in-situ.tsx',
      'client/src/components/laboratory/density-real.tsx', 
      'client/src/components/laboratory/density-max-min.tsx'
    ];

    for (const calc of calculadoras) {
      try {
        const { stdout } = await execAsync(`grep -l "useEffect.*length >= 1" ${calc}`);
        if (stdout.trim()) {
          console.log(`‚úÖ ${calc.split('/').pop()} usa triggers de 1 d√≠gito`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  ${calc.split('/').pop()} pode n√£o estar usando os triggers corretos`);
      }
    }

    // 5. Resultado final
    console.log('\n' + '='.repeat(60));
    console.log('üìã RESULTADO DA CORRE√á√ÉO:');
    console.log('‚úÖ Hooks corrigidos para trigger de 1 d√≠gito');
    console.log('‚úÖ Triggers de 3 d√≠gitos removidos');
    console.log('‚úÖ Equipamentos numerados 1-8 dispon√≠veis');
    console.log('\nüéØ TESTE: Agora digite "1", "2", "3", etc. nas calculadoras');
    console.log('   O preenchimento deve acontecer instantaneamente!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testPreenchimentoCorrigido();