/**
 * Teste Completo da Sincroniza√ß√£o Firebase para Equipamentos e Ensaios
 * Valida sistema triplo completo incluindo equipamentos
 */

import fetch from 'node-fetch';

async function testFirebaseEquipamentosCompleto() {
  console.log('üî• TESTE COMPLETO SINCRONIZA√á√ÉO FIREBASE - EQUIPAMENTOS E ENSAIOS');
  console.log('='.repeat(60));

  try {
    // 1. Testar endpoint de equipamentos
    console.log('\nüîß TESTANDO ENDPOINT DE EQUIPAMENTOS...');
    
    const equipResponse = await fetch('http://localhost:5000/api/equipamentos', {
      method: 'GET'
    });

    console.log(`üì° Status equipamentos: ${equipResponse.status}`);
    
    if (equipResponse.status === 401) {
      console.log('üîê Endpoint protegido (correto)');
    } else if (equipResponse.ok) {
      const equipData = await equipResponse.json();
      console.log(`‚úÖ Equipamentos encontrados: ${equipData.capsulas?.length || 0} c√°psulas, ${equipData.cilindros?.length || 0} cilindros`);
    }

    // 2. Validar tipos de equipamentos dispon√≠veis
    console.log('\nüì¶ TIPOS DE EQUIPAMENTOS QUE DEVEM SINCRONIZAR:');
    console.log('-'.repeat(40));
    console.log('C√ÅPSULAS:');
    console.log('  ‚Ä¢ Pequenas (densidade real) - c√≥digos 1-3');
    console.log('  ‚Ä¢ M√©dias (umidade) - c√≥digos 4-6');
    console.log('  ‚Ä¢ Grandes (frigideira) - c√≥digos 7-8');
    console.log('CILINDROS:');
    console.log('  ‚Ä¢ Biselados (in-situ) - c√≥digos 1-2');
    console.log('  ‚Ä¢ Padr√£o (m√°x/m√≠n) - c√≥digos 3-4');
    console.log('  ‚Ä¢ Proctor - c√≥digo 5');

    // 3. Testar endpoints de ensaios
    console.log('\nüß™ TESTANDO ENDPOINTS DE ENSAIOS...');
    
    const ensaioEndpoints = [
      { name: 'Densidade In-Situ', url: '/api/tests/density-in-situ' },
      { name: 'Densidade Real', url: '/api/tests/real-density' },
      { name: 'Densidade M√°x/M√≠n', url: '/api/tests/max-min-density' }
    ];

    for (const endpoint of ensaioEndpoints) {
      const response = await fetch(`http://localhost:5000${endpoint.url}`);
      console.log(`  ${endpoint.name}: ${response.status === 401 ? 'üîê Protegido' : response.status === 200 ? '‚úÖ OK' : '‚ùå Erro'}`);
    }

    // 4. Instru√ß√µes para teste completo
    console.log('\nüìã INSTRU√á√ïES PARA TESTE COMPLETO DA SINCRONIZA√á√ÉO:');
    console.log('-'.repeat(50));
    
    console.log('\nüîß TESTE DE EQUIPAMENTOS:');
    console.log('1. Fa√ßa login no sistema');
    console.log('2. V√° para "Equipamentos"');
    console.log('3. Edite diferentes tipos:');
    console.log('   ‚Ä¢ C√°psula pequena (c√≥digo 1)');
    console.log('   ‚Ä¢ C√°psula m√©dia (c√≥digo 4)');
    console.log('   ‚Ä¢ Cilindro biselado (c√≥digo 1)');
    console.log('   ‚Ä¢ Cilindro proctor (c√≥digo 5)');
    console.log('4. Para cada edi√ß√£o, verifique:');
    console.log('   ‚Ä¢ Mensagem: "salvo no PostgreSQL e sincronizado com Firebase"');
    console.log('   ‚Ä¢ Console do navegador: logs de sincroniza√ß√£o Firebase');

    console.log('\nüß™ TESTE DE ENSAIOS:');
    console.log('1. Crie ensaio de cada tipo:');
    console.log('   ‚Ä¢ Densidade In-Situ');
    console.log('   ‚Ä¢ Densidade Real');
    console.log('   ‚Ä¢ Densidade M√°x/M√≠n');
    console.log('2. Salve cada ensaio');
    console.log('3. Verifique mensagem de sincroniza√ß√£o Firebase');

    console.log('\nüîç VERIFICA√á√ÉO NO FIREBASE:');
    console.log('1. Abra Firebase Console');
    console.log('2. V√° para Firestore Database');
    console.log('3. Procure collection "laboratory_data"');
    console.log('4. Confirme se aparecem documentos para:');
    console.log('   ‚Ä¢ Equipamentos editados');
    console.log('   ‚Ä¢ Ensaios salvos');
    console.log('5. Cada documento deve ter:');
    console.log('   ‚Ä¢ ID v√°lido (sem caracteres especiais)');
    console.log('   ‚Ä¢ type: "equipamento" ou "ensaio"');
    console.log('   ‚Ä¢ subtype: tipo espec√≠fico');
    console.log('   ‚Ä¢ data: dados completos');
    console.log('   ‚Ä¢ userId: ID do usu√°rio Firebase');
    console.log('   ‚Ä¢ timestamps: createdAt, updatedAt, syncedAt');

    console.log('\n‚ö†Ô∏è PROBLEMAS CONHECIDOS:');
    console.log('-'.repeat(30));
    console.log('‚Ä¢ "Firebase verification failed" nos logs do servidor');
    console.log('‚Ä¢ Isso √© esperado - o servidor usa fallback de desenvolvimento');
    console.log('‚Ä¢ A sincroniza√ß√£o funciona no frontend com autentica√ß√£o real');

    console.log('\nüî• RESULTADO ESPERADO:');
    console.log('-'.repeat(25));
    console.log('‚úÖ Todos os tipos de equipamentos sincronizam');
    console.log('‚úÖ Todos os tipos de ensaios sincronizam');
    console.log('‚úÖ Dados aparecem no Firebase Firestore');
    console.log('‚úÖ Sistema triplo completo funcionando:');
    console.log('   Local Storage ‚Üí PostgreSQL ‚Üí Firebase Firestore');

    console.log('\nüåê LINKS PARA VERIFICA√á√ÉO:');
    console.log('-'.repeat(30));
    console.log('‚Ä¢ Sistema: http://localhost:5000');
    console.log('‚Ä¢ Firebase Console: https://console.firebase.google.com');
    console.log('‚Ä¢ Firestore: Projeto ‚Üí Firestore Database ‚Üí laboratory_data');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }

  console.log('\n‚úÖ Teste conclu√≠do - agora teste editando equipamentos de diferentes tipos!');
}

// Executar teste
testFirebaseEquipamentosCompleto()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  });