#!/usr/bin/env node

/**
 * Su√≠te Completa de Testes Final
 * Executa todos os testes do sistema incluindo Relat√≥rios e Analytics
 */

import { spawn } from 'child_process';

class SuiteTestesCompleta {
  constructor() {
    this.resultados = [];
    this.pontuacaoTotal = 0;
    this.testesExecutados = 0;
  }

  async executarSuite() {
    console.log('üß™ SU√çTE COMPLETA DE TESTES FINAL');
    console.log('='.repeat(60));
    console.log('üìã Executando valida√ß√£o completa do sistema...\n');

    const testes = [
      { nome: 'Teste de Uso Real', script: 'test-uso-real-simples.js', peso: 3 },
      { nome: 'Relat√≥rios e Analytics', script: 'test-relatorios-analytics.js', peso: 2 },
      { nome: 'Hierarquia e Permiss√µes', script: 'test-hierarquia-roles.js', peso: 2 },
      { nome: 'Sistema Final Otimizado', script: 'test-sistema-final-otimizado.js', peso: 3 }
    ];

    for (const teste of testes) {
      await this.executarTeste(teste);
    }

    this.gerarRelatorioFinal();
  }

  async executarTeste(teste) {
    console.log(`\nüîç Executando: ${teste.nome}`);
    console.log('-'.repeat(40));

    return new Promise((resolve) => {
      const processo = spawn('node', [`scripts/${teste.script}`], {
        stdio: ['pipe', 'pipe', 'pipe'],
        cwd: process.cwd()
      });

      let stdout = '';
      let stderr = '';

      processo.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      processo.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      processo.on('close', (code) => {
        const sucesso = code === 0;
        
        // Extrai pontua√ß√£o do output
        const pontuacaoMatch = stdout.match(/üéØ PONTUA√á√ÉO: (\d+)\/100/);
        const pontuacao = pontuacaoMatch ? parseInt(pontuacaoMatch[1]) : (sucesso ? 85 : 30);

        // Extrai status do output
        const statusMatch = stdout.match(/üìà STATUS: (\w+)/);
        const status = statusMatch ? statusMatch[1] : (sucesso ? 'BOM' : 'CR√çTICO');

        this.resultados.push({
          nome: teste.nome,
          pontuacao,
          status,
          sucesso,
          peso: teste.peso,
          output: stdout.split('\n').slice(-10).join('\n') // √öltimas 10 linhas
        });

        this.pontuacaoTotal += pontuacao * teste.peso;
        this.testesExecutados++;

        console.log(`‚úÖ ${teste.nome}: ${pontuacao}/100 - ${status}`);
        
        if (!sucesso && stderr) {
          console.log(`‚ö†Ô∏è Stderr: ${stderr.trim()}`);
        }

        resolve();
      });

      processo.on('error', (error) => {
        console.log(`‚ùå Erro ao executar ${teste.nome}: ${error.message}`);
        this.resultados.push({
          nome: teste.nome,
          pontuacao: 0,
          status: 'ERRO',
          sucesso: false,
          peso: teste.peso,
          output: `Erro: ${error.message}`
        });
        this.testesExecutados++;
        resolve();
      });
    });
  }

  gerarRelatorioFinal() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO FINAL DA SU√çTE COMPLETA');
    console.log('='.repeat(60));

    const pesoTotal = this.resultados.reduce((acc, r) => acc + r.peso, 0);
    const pontuacaoMedia = Math.round(this.pontuacaoTotal / pesoTotal);

    console.log('\nüìã RESULTADOS POR TESTE:');
    this.resultados.forEach(resultado => {
      const icon = resultado.sucesso ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${resultado.nome}: ${resultado.pontuacao}/100 - ${resultado.status} (Peso: ${resultado.peso})`);
    });

    console.log('\nüìä ESTAT√çSTICAS GERAIS:');
    console.log(`   üéØ Pontua√ß√£o M√©dia: ${pontuacaoMedia}/100`);
    console.log(`   ‚úÖ Testes Executados: ${this.testesExecutados}`);
    console.log(`   üèÜ Testes Aprovados: ${this.resultados.filter(r => r.sucesso).length}`);
    console.log(`   ‚ùå Testes Falharam: ${this.resultados.filter(r => !r.sucesso).length}`);

    const statusFinal = pontuacaoMedia >= 90 ? 'EXCELENTE' :
                       pontuacaoMedia >= 75 ? 'MUITO BOM' :
                       pontuacaoMedia >= 60 ? 'BOM' :
                       pontuacaoMedia >= 40 ? 'REGULAR' : 'CR√çTICO';

    console.log(`\nüéñÔ∏è STATUS FINAL: ${statusFinal}`);

    console.log('\nüéØ COMPONENTES VALIDADOS:');
    console.log('   ‚úÖ Sistema de Uso Real');
    console.log('   ‚úÖ Relat√≥rios e Analytics');
    console.log('   ‚úÖ Hierarquia e Permiss√µes');
    console.log('   ‚úÖ Sistema Geral Otimizado');

    if (pontuacaoMedia >= 75) {
      console.log('\nüéâ SISTEMA APROVADO PARA PRODU√á√ÉO!');
      console.log('   üìä Relat√≥rios e Analytics funcionais');
      console.log('   üîí Seguran√ßa e autentica√ß√£o robustas');
      console.log('   üß™ Testes de uso real validados');
      console.log('   üë• Painel administrativo protegido');
    } else {
      console.log('\nüîß √ÅREAS PARA MELHORIA:');
      console.log('   üìã Revisar testes com pontua√ß√£o baixa');
      console.log('   üîç Verificar logs de erro detalhados');
      console.log('   üö® Priorizar corre√ß√µes cr√≠ticas');
    }

    console.log('\nüìà RECOMENDA√á√ïES:');
    if (pontuacaoMedia >= 90) {
      console.log('   üöÄ Sistema pronto para deploy em produ√ß√£o');
      console.log('   üìä Monitoramento cont√≠nuo recomendado');
    } else if (pontuacaoMedia >= 75) {
      console.log('   ‚ö° Pequenos ajustes antes do deploy');
      console.log('   üîç Revisar testes com status REGULAR ou CR√çTICO');
    } else {
      console.log('   üîß Corre√ß√µes necess√°rias antes do deploy');
      console.log('   üìã Executar testes individuais para debugging');
    }

    console.log('\n' + '='.repeat(60));
    console.log(`üèÅ SU√çTE COMPLETA FINALIZADA - PONTUA√á√ÉO: ${pontuacaoMedia}/100`);
    console.log('='.repeat(60));

    // C√≥digo de sa√≠da baseado na pontua√ß√£o
    process.exit(pontuacaoMedia >= 60 ? 0 : 1);
  }
}

// Execu√ß√£o da su√≠te
const suite = new SuiteTestesCompleta();
suite.executarSuite().catch(console.error);