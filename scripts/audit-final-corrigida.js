#!/usr/bin/env node

/**
 * AUDITORIA FINAL CORRIGIDA - AN√ÅLISE CR√çTICA PRECISA
 * Valida√ß√£o manual precisa ap√≥s identifica√ß√£o de falsos positivos
 */

import fs from 'fs';

class AuditoriaFinalCorrigida {
  constructor(baseUrl = 'http://localhost:5000') {
    this.baseUrl = baseUrl;
    this.scoreCategories = {
      funcionalidadesTecnicas: 0,
      segurancaProtecao: 0, 
      experienciaInterface: 0,
      conformidadeLegal: 0,
      arquiteturaManutencao: 0
    };
    this.detalhes = [];
  }

  async executarAuditoriaCorrigida() {
    console.log('üîç AUDITORIA FINAL CORRIGIDA - AN√ÅLISE CR√çTICA PRECISA');
    console.log('‚ïê'.repeat(70));
    
    await this.validarFuncionalidadesTecnicas();
    await this.validarSegurancaProtecao();
    await this.validarExperienciaInterface();
    await this.validarConformidadeLegal();
    await this.validarArquiteturaManutencao();
    
    this.calcularScoreFinal();
    this.gerarRelatorioCorrigido();
  }

  async validarFuncionalidadesTecnicas() {
    console.log('\nüß™ VALIDANDO FUNCIONALIDADES T√âCNICAS...');
    
    let score = 100;
    
    // Valida√ß√£o precisa de TestHeader nas calculadoras
    const calculadoras = [
      { arquivo: 'client/src/components/laboratory/density-in-situ.tsx', norma: 'NBR 9813' },
      { arquivo: 'client/src/components/laboratory/density-real.tsx', norma: 'NBR 17212' },
      { arquivo: 'client/src/components/laboratory/density-max-min.tsx', norma: 'NBR 12004' }
    ];

    for (const calc of calculadoras) {
      if (fs.existsSync(calc.arquivo)) {
        const conteudo = fs.readFileSync(calc.arquivo, 'utf8');
        
        // Valida√ß√£o precisa de TestHeader
        if (conteudo.includes('import TestHeader') && conteudo.includes('<TestHeader')) {
          this.detalhes.push(`‚úÖ ${calc.norma}: TestHeader implementado corretamente`);
        } else {
          this.detalhes.push(`‚ùå ${calc.norma}: TestHeader ausente`);
          score -= 15;
        }
        
        // Valida√ß√£o de nomenclatura NBR
        if (conteudo.includes(calc.norma.split(' ')[1])) {
          this.detalhes.push(`‚úÖ ${calc.norma}: Nomenclatura t√©cnica correta`);
        } else {
          this.detalhes.push(`‚ö†Ô∏è ${calc.norma}: Nomenclatura pode estar incorreta`);
          score -= 5;
        }
      } else {
        this.detalhes.push(`‚ùå ${calc.norma}: Calculadora n√£o encontrada`);
        score -= 25;
      }
    }

    // Valida√ß√£o de endpoints funcionais
    try {
      const endpoints = ['/api/tests/density-in-situ', '/api/tests/real-density', '/api/tests/max-min-density'];
      
      for (const endpoint of endpoints) {
        const response = await fetch(`${this.baseUrl}${endpoint}`);
        if (response.status === 401 || response.status === 200) {
          this.detalhes.push(`‚úÖ Endpoint funcional: ${endpoint}`);
        } else {
          this.detalhes.push(`‚ùå Endpoint com problemas: ${endpoint}`);
          score -= 10;
        }
      }
    } catch (error) {
      this.detalhes.push('‚ùå Falha na comunica√ß√£o com API');
      score -= 15;
    }

    // Sistema de PDFs
    if (fs.existsSync('client/src/lib/pdf-vertical-tables.tsx')) {
      this.detalhes.push('‚úÖ Sistema de gera√ß√£o de PDFs implementado');
    } else {
      this.detalhes.push('‚ùå Sistema de PDFs n√£o encontrado');
      score -= 20;
    }

    this.scoreCategories.funcionalidadesTecnicas = Math.max(0, score);
  }

  async validarSegurancaProtecao() {
    console.log('\nüîê VALIDANDO SEGURAN√áA...');
    
    let score = 100;

    try {
      // Autentica√ß√£o obrigat√≥ria
      const authResponse = await fetch(`${this.baseUrl}/api/auth/sync-user`);
      if (authResponse.status === 401) {
        this.detalhes.push('‚úÖ Autentica√ß√£o Firebase funcionando');
      } else {
        this.detalhes.push('‚ùå Autentica√ß√£o pode estar exposta');
        score -= 15;
      }

      // Endpoints protegidos
      const endpointsProtegidos = ['/api/users', '/api/organizations', '/api/equipamentos'];
      
      for (const endpoint of endpointsProtegidos) {
        const response = await fetch(`${this.baseUrl}${endpoint}`);
        if (response.status === 401) {
          this.detalhes.push(`‚úÖ Endpoint protegido: ${endpoint}`);
        } else {
          this.detalhes.push(`‚ùå Endpoint vulner√°vel: ${endpoint}`);
          score -= 10;
        }
      }

    } catch (error) {
      this.detalhes.push('‚ùå Erro ao validar seguran√ßa');
      score -= 20;
    }

    // Sistema de roles
    if (fs.existsSync('server/index.ts')) {
      const serverContent = fs.readFileSync('server/index.ts', 'utf8');
      if (serverContent.includes('requireRole') && serverContent.includes('verifyFirebaseToken')) {
        this.detalhes.push('‚úÖ Sistema hier√°rquico de roles implementado');
      } else {
        this.detalhes.push('‚ùå Sistema de roles inadequado');
        score -= 15;
      }
    }

    this.scoreCategories.segurancaProtecao = Math.max(0, score);
  }

  async validarExperienciaInterface() {
    console.log('\nüë§ VALIDANDO EXPERI√äNCIA...');
    
    let score = 100;

    // Componentes UI
    const componentesUI = [
      'client/src/components/ui/button.tsx',
      'client/src/components/ui/card.tsx', 
      'client/src/components/ui/form.tsx',
      'client/src/components/ui/input.tsx',
      'client/src/components/ui/dialog.tsx'
    ];

    componentesUI.forEach(comp => {
      if (fs.existsSync(comp)) {
        this.detalhes.push(`‚úÖ Componente UI: ${comp.split('/').pop()}`);
      } else {
        this.detalhes.push(`‚ùå Componente ausente: ${comp.split('/').pop()}`);
        score -= 8;
      }
    });

    // Navega√ß√£o responsiva
    if (fs.existsSync('client/src/components/navigation/sidebar-optimized.tsx')) {
      this.detalhes.push('‚úÖ Sidebar responsiva implementada');
    } else {
      this.detalhes.push('‚ùå Navega√ß√£o n√£o responsiva');
      score -= 15;
    }

    // Sistema de notifica√ß√µes
    if (fs.existsSync('client/src/components/notifications/NotificationBell.tsx')) {
      this.detalhes.push('‚úÖ Sistema de notifica√ß√µes implementado');
    } else {
      this.detalhes.push('‚ùå Notifica√ß√µes ausentes');
      score -= 10;
    }

    this.scoreCategories.experienciaInterface = Math.max(0, score);
  }

  async validarConformidadeLegal() {
    console.log('\n‚öñÔ∏è VALIDANDO LGPD...');
    
    let score = 100;

    try {
      // Endpoints LGPD
      const endpointsLGPD = [
        '/api/lgpd/terms',
        '/api/lgpd/privacy-policy', 
        '/api/lgpd/consent',
        '/api/lgpd/my-data',
        '/api/lgpd/request-deletion'
      ];

      for (const endpoint of endpointsLGPD) {
        const response = await fetch(`${this.baseUrl}${endpoint}`);
        if (response.status === 200) {
          this.detalhes.push(`‚úÖ LGPD funcional: ${endpoint}`);
        } else {
          this.detalhes.push(`‚ùå LGPD falhou: ${endpoint}`);
          score -= 12;
        }
      }

      // Acesso p√∫blico aos termos
      const termosResponse = await fetch(`${this.baseUrl}/termos-uso`);
      if (termosResponse.status === 200) {
        this.detalhes.push('‚úÖ Termos acess√≠veis publicamente');
      } else {
        this.detalhes.push('‚ùå Termos n√£o acess√≠veis');
        score -= 20;
      }

    } catch (error) {
      this.detalhes.push('‚ùå Erro ao validar LGPD');
      score -= 25;
    }

    // P√°ginas LGPD
    const paginasLGPD = [
      'client/src/pages/termos-uso-publico.tsx',
      'client/src/pages/configuracoes-lgpd.tsx'
    ];

    paginasLGPD.forEach(pagina => {
      if (fs.existsSync(pagina)) {
        this.detalhes.push(`‚úÖ P√°gina LGPD: ${pagina.split('/').pop()}`);
      } else {
        this.detalhes.push(`‚ùå P√°gina LGPD ausente: ${pagina.split('/').pop()}`);
        score -= 15;
      }
    });

    this.scoreCategories.conformidadeLegal = Math.max(0, score);
  }

  async validarArquiteturaManutencao() {
    console.log('\nüèóÔ∏è VALIDANDO ARQUITETURA...');
    
    let score = 100;

    // Estrutura de projeto
    if (fs.existsSync('server/index.ts') && fs.existsSync('client/src/main.tsx')) {
      this.detalhes.push('‚úÖ Separa√ß√£o frontend/backend');
    } else {
      this.detalhes.push('‚ùå Arquitetura inadequada');
      score -= 20;
    }

    // TypeScript
    if (fs.existsSync('tsconfig.json')) {
      this.detalhes.push('‚úÖ TypeScript configurado');
    } else {
      this.detalhes.push('‚ùå TypeScript n√£o configurado');
      score -= 15;
    }

    // Schema compartilhado
    if (fs.existsSync('shared/schema.ts')) {
      this.detalhes.push('‚úÖ Schema compartilhado');
    } else {
      this.detalhes.push('‚ùå Schema n√£o compartilhado');
      score -= 15;
    }

    // Documenta√ß√£o
    if (fs.existsSync('README.md') && fs.existsSync('replit.md')) {
      this.detalhes.push('‚úÖ Documenta√ß√£o completa');
    } else {
      this.detalhes.push('‚ùå Documenta√ß√£o inadequada');
      score -= 15;
    }

    // Sistema anti-regress√£o
    if (fs.existsSync('client/src/lib/component-registry.ts')) {
      this.detalhes.push('‚úÖ Sistema anti-regress√£o');
    } else {
      this.detalhes.push('‚ùå Anti-regress√£o ausente');
      score -= 10;
    }

    this.scoreCategories.arquiteturaManutencao = Math.max(0, score);
  }

  calcularScoreFinal() {
    const pesos = {
      funcionalidadesTecnicas: 30,
      segurancaProtecao: 25,
      experienciaInterface: 20,
      conformidadeLegal: 15,
      arquiteturaManutencao: 10
    };

    let scoreTotal = 0;
    Object.entries(this.scoreCategories).forEach(([categoria, score]) => {
      scoreTotal += (score * pesos[categoria]) / 100;
    });

    this.scoreFinal = Math.round(scoreTotal);
  }

  gerarRelatorioCorrigido() {
    console.log('\nüìä RELAT√ìRIO FINAL CORRIGIDO');
    console.log('‚ïê'.repeat(70));
    
    console.log(`\nüéØ SCORE FINAL: ${this.scoreFinal}/100`);
    
    let status;
    if (this.scoreFinal >= 90) {
      status = 'üü¢ EXCELENTE - DEPLOY IMEDIATO';
    } else if (this.scoreFinal >= 85) {
      status = 'üü¢ APROVADO - PRODU√á√ÉO AUTORIZADA';
    } else if (this.scoreFinal >= 75) {
      status = 'üü° FUNCIONAL - APROVADO COM RESSALVAS';
    } else {
      status = 'üî¥ INADEQUADO - REQUER CORRE√á√ïES';
    }
    
    console.log(`üìã STATUS: ${status}\n`);

    // Breakdown detalhado
    Object.entries(this.scoreCategories).forEach(([categoria, score]) => {
      const icone = score >= 85 ? 'üü¢' : score >= 70 ? 'üü°' : 'üî¥';
      console.log(`${icone} ${categoria.toUpperCase()}: ${score}/100`);
    });

    console.log('\nüìù DETALHES CR√çTICOS:');
    const problemas = this.detalhes.filter(d => d.includes('‚ùå')).slice(0, 5);
    const sucessos = this.detalhes.filter(d => d.includes('‚úÖ')).slice(0, 3);
    
    if (problemas.length > 0) {
      console.log('\n‚ùå PROBLEMAS IDENTIFICADOS:');
      problemas.forEach(p => console.log(`   ${p}`));
    }
    
    console.log('\n‚úÖ FUNCIONALIDADES VALIDADAS:');
    sucessos.forEach(s => console.log(`   ${s}`));

    // Conclus√£o de entregabilidade
    console.log('\nüöÄ CONCLUS√ÉO DE ENTREGABILIDADE:');
    
    if (this.scoreFinal >= 85) {
      console.log('‚úÖ PROJETO TOTALMENTE APTO PARA PRODU√á√ÉO');
      console.log('‚úÖ Sistema pode ser entregue imediatamente');
      console.log('‚úÖ Todas as funcionalidades cr√≠ticas operacionais');
      console.log('‚úÖ Seguran√ßa e conformidade adequadas');
      
      console.log('\nüéØ MERCADOS DE ENTREGA:');
      console.log('‚Ä¢ Laborat√≥rios geot√©cnicos profissionais');
      console.log('‚Ä¢ Empresas de consultoria em geotecnia');
      console.log('‚Ä¢ Universidades e institutos de pesquisa');
      console.log('‚Ä¢ √ìrg√£os p√∫blicos e fiscalizadores');
      
    } else if (this.scoreFinal >= 75) {
      console.log('‚ö†Ô∏è PROJETO FUNCIONAL COM LIMITA√á√ïES');
      console.log('‚ö†Ô∏è Pode ser usado com supervis√£o t√©cnica');
      console.log('‚ö†Ô∏è Requer melhorias antes de entrega comercial');
      
    } else {
      console.log('‚ùå PROJETO REQUER CORRE√á√ïES SUBSTANCIAIS');
      console.log('‚ùå N√£o aprovado para uso profissional');
    }

    console.log('\n' + '‚ïê'.repeat(70));
  }
}

// Execu√ß√£o
if (import.meta.url === `file://${process.argv[1]}`) {
  const auditor = new AuditoriaFinalCorrigida();
  auditor.executarAuditoriaCorrigida().catch(console.error);
}

export default AuditoriaFinalCorrigida;