/**
 * Su√≠te Completa de Testes para Futuras Implementa√ß√µes
 * Executa todos os testes automatizados do sistema
 */

import EnsaiosSavingTester from './test-ensaios-salvamento.js';
import PDFGenerationTester from './test-pdf-generation.js';

class CompletTestSuite {
  constructor(baseUrl = 'http://localhost:5000') {
    this.baseUrl = baseUrl;
    this.results = {
      saving: null,
      pdf: null,
      overall: { passed: 0, total: 0 }
    };
  }

  async runAllTests() {
    console.log('üöÄ INICIANDO SU√çTE COMPLETA DE TESTES');
    console.log('='.repeat(70));

    // Teste de salvamento
    console.log('\n1Ô∏è‚É£ EXECUTANDO TESTES DE SALVAMENTO...');
    await this.runSavingTests();

    // Aguardar um pouco entre testes
    await this.sleep(2000);

    // Teste de gera√ß√£o de PDF
    console.log('\n2Ô∏è‚É£ EXECUTANDO TESTES DE GERA√á√ÉO DE PDF...');
    await this.runPDFTests();

    // Relat√≥rio final
    this.generateFinalReport();
  }

  async runSavingTests() {
    try {
      const savingTester = new EnsaiosSavingTester(this.baseUrl);
      
      // Capturar resultado sem sair do processo
      const originalExit = process.exit;
      let exitCode = 0;
      process.exit = (code) => { exitCode = code; };

      // Redirecionar console.log para capturar sa√≠da
      const originalLog = console.log;
      let output = '';
      console.log = (...args) => {
        output += args.join(' ') + '\n';
        originalLog(...args);
      };

      try {
        await savingTester.runTests();
      } catch (error) {
        exitCode = 1;
      }

      // Restaurar fun√ß√µes originais
      process.exit = originalExit;
      console.log = originalLog;

      this.results.saving = {
        passed: exitCode === 0,
        output: output
      };

      if (exitCode === 0) {
        this.results.overall.passed++;
      }
      this.results.overall.total++;

    } catch (error) {
      console.error('‚ùå Erro nos testes de salvamento:', error.message);
      this.results.saving = {
        passed: false,
        output: `Erro: ${error.message}`
      };
      this.results.overall.total++;
    }
  }

  async runPDFTests() {
    try {
      const pdfTester = new PDFGenerationTester(this.baseUrl);
      
      // Capturar resultado sem sair do processo
      const originalExit = process.exit;
      let exitCode = 0;
      process.exit = (code) => { exitCode = code; };

      // Redirecionar console.log para capturar sa√≠da
      const originalLog = console.log;
      let output = '';
      console.log = (...args) => {
        output += args.join(' ') + '\n';
        originalLog(...args);
      };

      try {
        await pdfTester.runTests();
      } catch (error) {
        exitCode = 1;
      }

      // Restaurar fun√ß√µes originais
      process.exit = originalExit;
      console.log = originalLog;

      this.results.pdf = {
        passed: exitCode === 0,
        output: output
      };

      if (exitCode === 0) {
        this.results.overall.passed++;
      }
      this.results.overall.total++;

    } catch (error) {
      console.error('‚ùå Erro nos testes de PDF:', error.message);
      this.results.pdf = {
        passed: false,
        output: `Erro: ${error.message}`
      };
      this.results.overall.total++;
    }
  }

  generateFinalReport() {
    console.log('\n' + '='.repeat(70));
    console.log('üìä RELAT√ìRIO FINAL - SU√çTE COMPLETA DE TESTES');
    console.log('='.repeat(70));

    console.log('\nüîç RESUMO DOS TESTES:');
    console.log(`   ‚Ä¢ Salvamento de Ensaios: ${this.results.saving?.passed ? '‚úÖ APROVADO' : '‚ùå FALHOU'}`);
    console.log(`   ‚Ä¢ Gera√ß√£o de PDFs: ${this.results.pdf?.passed ? '‚úÖ APROVADO' : '‚ùå FALHOU'}`);

    console.log('\nüìà RESULTADO GERAL:');
    console.log(`   ${this.results.overall.passed}/${this.results.overall.total} su√≠tes aprovadas`);

    if (this.results.overall.passed === this.results.overall.total) {
      console.log('\nüéâ TODOS OS TESTES APROVADOS!');
      console.log('‚úÖ Sistema pronto para futuras implementa√ß√µes');
      console.log('‚úÖ Funcionalidades de salvamento e PDF validadas');
    } else {
      console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
      console.log('‚ùå Corrigir problemas antes de novas implementa√ß√µes');
      
      if (!this.results.saving?.passed) {
        console.log('   - Problema no salvamento de ensaios');
      }
      if (!this.results.pdf?.passed) {
        console.log('   - Problema na gera√ß√£o de PDFs');
      }
    }

    console.log('\nüìã COMANDOS PARA TESTES INDIVIDUAIS:');
    console.log('   node scripts/test-ensaios-salvamento.js');
    console.log('   node scripts/test-pdf-generation.js');
    console.log('   node scripts/test-suite-completa.js');

    console.log('\n' + '='.repeat(70));

    // Exit code para CI/CD
    const success = this.results.overall.passed === this.results.overall.total;
    process.exit(success ? 0 : 1);
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Executar su√≠te completa
if (import.meta.url === `file://${process.argv[1]}`) {
  const suite = new CompletTestSuite();
  suite.runAllTests().catch(console.error);
}

export default CompletTestSuite;