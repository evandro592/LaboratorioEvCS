#!/usr/bin/env node

/**
 * AUDITORIA FINAL PARA VALIDA√á√ÉO DE PRODU√á√ÉO
 * An√°lise cr√≠tica completa ap√≥s corre√ß√µes dos problemas identificados
 */

import fs from 'fs';

class AuditoriaFinalProducao {
  constructor(baseUrl = 'http://localhost:5000') {
    this.baseUrl = baseUrl;
    this.resultados = {
      funcionalidadesTecnicas: { score: 0, detalhes: [] },
      segurancaProtecao: { score: 0, detalhes: [] },
      experienciaInterface: { score: 0, detalhes: [] },
      conformidadeLegal: { score: 0, detalhes: [] },
      arquiteturaManutencao: { score: 0, detalhes: [] },
      scoreGeral: 0,
      statusProducao: 'pending',
      recomendacoesFinal: []
    };
  }

  async executarAuditoriaFinal() {
    console.log('üîç AUDITORIA FINAL DE PRODU√á√ÉO - AN√ÅLISE CR√çTICA COMPLETA');
    console.log('‚ïê'.repeat(70));
    
    await this.auditarFuncionalidadesTecnicas();
    await this.auditarSegurancaProtecao();
    await this.auditarExperienciaInterface();
    await this.auditarConformidadeLegal();
    await this.auditarArquiteturaManutencao();
    
    this.calcularScoreFinal();
    this.determinarStatusProducao();
    this.gerarRelatorioFinal();
  }

  async auditarFuncionalidadesTecnicas() {
    console.log('\nüß™ FUNCIONALIDADES T√âCNICAS GEOT√âCNICAS...');
    
    let score = 100;
    const detalhes = [];

    // Calculadoras NBR essenciais
    const calculadorasNBR = [
      { arquivo: 'client/src/pages/solos/densidade-in-situ.tsx', norma: 'NBR 9813:2021' },
      { arquivo: 'client/src/pages/solos/densidade-real.tsx', norma: 'NBR 17212:2025' },
      { arquivo: 'client/src/pages/solos/densidade-max-min.tsx', norma: 'NBR 12004/12051:2021' }
    ];

    for (const calc of calculadorasNBR) {
      if (fs.existsSync(calc.arquivo)) {
        const conteudo = fs.readFileSync(calc.arquivo, 'utf8');
        
        // Verifica nomenclatura t√©cnica correta
        const nbrNumber = calc.norma.match(/NBR (\d+)/)[1];
        if (conteudo.includes(nbrNumber)) {
          detalhes.push(`‚úÖ Calculadora ${calc.norma} implementada e nomenclatura correta`);
        } else {
          detalhes.push(`‚ö†Ô∏è Calculadora ${calc.norma} encontrada mas nomenclatura pode estar incorreta`);
          score -= 5;
        }

        // Verifica componente TestHeader
        if (conteudo.includes('TestHeader')) {
          detalhes.push(`‚úÖ Cabe√ßalho t√©cnico profissional integrado em ${calc.norma}`);
        } else {
          detalhes.push(`‚ùå Cabe√ßalho t√©cnico ausente em ${calc.norma}`);
          score -= 10;
        }
      } else {
        detalhes.push(`‚ùå Calculadora ${calc.norma} n√£o encontrada`);
        score -= 25;
      }
    }

    // Sistema de ensaios salvos
    try {
      const ensaiosResponse = await fetch(`${this.baseUrl}/api/tests/density-in-situ`);
      if (ensaiosResponse.status === 401 || ensaiosResponse.status === 200) {
        detalhes.push('‚úÖ Endpoints de ensaios protegidos e funcionais');
      } else {
        detalhes.push(`‚ùå Endpoints de ensaios com problemas: ${ensaiosResponse.status}`);
        score -= 15;
      }
    } catch (error) {
      detalhes.push('‚ùå Falha na comunica√ß√£o com API de ensaios');
      score -= 20;
    }

    // Gera√ß√£o de PDFs t√©cnicos
    if (fs.existsSync('client/src/lib/pdf-vertical-tables.tsx')) {
      detalhes.push('‚úÖ Sistema de gera√ß√£o de PDFs t√©cnicos implementado');
    } else {
      detalhes.push('‚ùå Sistema de PDFs n√£o encontrado');
      score -= 20;
    }

    // Biblioteca de c√°lculos
    if (fs.existsSync('client/src/lib/calculations.ts')) {
      detalhes.push('‚úÖ Biblioteca de c√°lculos geot√©cnicos implementada');
    } else {
      detalhes.push('‚ùå Biblioteca de c√°lculos n√£o encontrada');
      score -= 15;
    }

    this.resultados.funcionalidadesTecnicas.score = Math.max(0, score);
    this.resultados.funcionalidadesTecnicas.detalhes = detalhes;
  }

  async auditarSegurancaProtecao() {
    console.log('\nüîê SEGURAN√áA E PROTE√á√ÉO DE DADOS...');
    
    let score = 100;
    const detalhes = [];

    try {
      // Autentica√ß√£o Firebase
      const syncResponse = await fetch(`${this.baseUrl}/api/auth/sync-user`);
      if (syncResponse.status === 401) {
        detalhes.push('‚úÖ Autentica√ß√£o Firebase obrigat√≥ria funcionando');
      } else {
        detalhes.push('‚ùå Autentica√ß√£o Firebase pode estar exposta');
        score -= 20;
      }

      // Prote√ß√£o de endpoints cr√≠ticos
      const endpointsCriticos = [
        '/api/users',
        '/api/organizations', 
        '/api/equipamentos',
        '/api/tests/density-in-situ'
      ];

      for (const endpoint of endpointsCriticos) {
        const response = await fetch(`${this.baseUrl}${endpoint}`);
        if (response.status === 401) {
          detalhes.push(`‚úÖ Endpoint protegido: ${endpoint}`);
        } else {
          detalhes.push(`‚ùå Endpoint vulner√°vel: ${endpoint} (${response.status})`);
          score -= 10;
        }
      }

      // Headers de seguran√ßa
      const healthResponse = await fetch(`${this.baseUrl}/api/health`);
      const headers = healthResponse.headers;
      
      if (headers.get('x-powered-by') === null) {
        detalhes.push('‚úÖ Header X-Powered-By removido');
      } else {
        detalhes.push('‚ö†Ô∏è Header X-Powered-By exposto');
        score -= 5;
      }

    } catch (error) {
      detalhes.push(`‚ùå Erro ao testar seguran√ßa: ${error.message}`);
      score -= 30;
    }

    // Sistema hier√°rquico de roles
    if (fs.existsSync('server/index.ts')) {
      const serverContent = fs.readFileSync('server/index.ts', 'utf8');
      if (serverContent.includes('requireRole')) {
        detalhes.push('‚úÖ Sistema hier√°rquico de roles implementado');
      } else {
        detalhes.push('‚ùå Sistema de roles n√£o encontrado');
        score -= 15;
      }
    }

    this.resultados.segurancaProtecao.score = Math.max(0, score);
    this.resultados.segurancaProtecao.detalhes = detalhes;
  }

  async auditarExperienciaInterface() {
    console.log('\nüë§ EXPERI√äNCIA E INTERFACE DO USU√ÅRIO...');
    
    let score = 100;
    const detalhes = [];

    // Componentes UI essenciais
    const componentesEssenciais = [
      'client/src/components/ui/button.tsx',
      'client/src/components/ui/card.tsx',
      'client/src/components/ui/form.tsx',
      'client/src/components/ui/input.tsx',
      'client/src/components/ui/dialog.tsx'
    ];

    componentesEssenciais.forEach(comp => {
      if (fs.existsSync(comp)) {
        detalhes.push(`‚úÖ Componente UI: ${comp.split('/').pop()}`);
      } else {
        detalhes.push(`‚ùå Componente UI ausente: ${comp.split('/').pop()}`);
        score -= 8;
      }
    });

    // Navega√ß√£o responsiva
    if (fs.existsSync('client/src/components/navigation/sidebar-optimized.tsx')) {
      detalhes.push('‚úÖ Sidebar responsiva otimizada');
    } else {
      detalhes.push('‚ùå Navega√ß√£o responsiva n√£o encontrada');
      score -= 15;
    }

    // Sistema de notifica√ß√µes
    if (fs.existsSync('client/src/components/notifications/NotificationBell.tsx')) {
      detalhes.push('‚úÖ Sistema de notifica√ß√µes visuais');
    } else {
      detalhes.push('‚ùå Sistema de notifica√ß√µes ausente');
      score -= 10;
    }

    // Feedback de loading
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (packageJson.dependencies['@tanstack/react-query']) {
      detalhes.push('‚úÖ React Query para estados de loading');
    } else {
      detalhes.push('‚ùå Sistema de loading inadequado');
      score -= 12;
    }

    // Styling consistente
    if (packageJson.dependencies['tailwindcss'] || packageJson.devDependencies['tailwindcss']) {
      detalhes.push('‚úÖ Tailwind CSS para design consistente');
    } else {
      detalhes.push('‚ùå Sistema de styling inadequado');
      score -= 15;
    }

    this.resultados.experienciaInterface.score = Math.max(0, score);
    this.resultados.experienciaInterface.detalhes = detalhes;
  }

  async auditarConformidadeLegal() {
    console.log('\n‚öñÔ∏è CONFORMIDADE LEGAL E LGPD...');
    
    let score = 100;
    const detalhes = [];

    try {
      // Endpoints LGPD obrigat√≥rios
      const endpointsLGPD = [
        { url: '/api/lgpd/terms', nome: 'Termos de uso' },
        { url: '/api/lgpd/privacy-policy', nome: 'Pol√≠tica de privacidade' },
        { url: '/api/lgpd/consent', nome: 'Consentimentos' },
        { url: '/api/lgpd/my-data', nome: 'Meus dados' },
        { url: '/api/lgpd/request-deletion', nome: 'Exclus√£o de dados' }
      ];

      for (const endpoint of endpointsLGPD) {
        const response = await fetch(`${this.baseUrl}${endpoint.url}`);
        if (response.status === 200) {
          detalhes.push(`‚úÖ ${endpoint.nome} funcional`);
        } else {
          detalhes.push(`‚ùå ${endpoint.nome} falhou (${response.status})`);
          score -= 15;
        }
      }

      // Acesso p√∫blico aos termos
      const termosResponse = await fetch(`${this.baseUrl}/termos-uso`);
      if (termosResponse.status === 200) {
        detalhes.push('‚úÖ Termos acess√≠veis publicamente (obrigat√≥rio LGPD)');
      } else {
        detalhes.push('‚ùå Termos n√£o acess√≠veis publicamente');
        score -= 20;
      }

    } catch (error) {
      detalhes.push(`‚ùå Erro ao verificar LGPD: ${error.message}`);
      score -= 25;
    }

    // P√°ginas LGPD
    const paginasLGPD = [
      'client/src/pages/termos-uso-publico.tsx',
      'client/src/pages/configuracoes-lgpd.tsx'
    ];

    paginasLGPD.forEach(pagina => {
      if (fs.existsSync(pagina)) {
        detalhes.push(`‚úÖ P√°gina LGPD: ${pagina.split('/').pop()}`);
      } else {
        detalhes.push(`‚ùå P√°gina LGPD ausente: ${pagina.split('/').pop()}`);
        score -= 20;
      }
    });

    this.resultados.conformidadeLegal.score = Math.max(0, score);
    this.resultados.conformidadeLegal.detalhes = detalhes;
  }

  async auditarArquiteturaManutencao() {
    console.log('\nüèóÔ∏è ARQUITETURA E MANUTENIBILIDADE...');
    
    let score = 100;
    const detalhes = [];

    // Separa√ß√£o frontend/backend
    if (fs.existsSync('server/index.ts') && fs.existsSync('client/src/main.tsx')) {
      detalhes.push('‚úÖ Arquitetura separada frontend/backend');
    } else {
      detalhes.push('‚ùå Arquitetura n√£o separada adequadamente');
      score -= 20;
    }

    // TypeScript
    if (fs.existsSync('tsconfig.json')) {
      detalhes.push('‚úÖ TypeScript configurado');
    } else {
      detalhes.push('‚ùå TypeScript n√£o configurado');
      score -= 15;
    }

    // Schema compartilhado
    if (fs.existsSync('shared/schema.ts')) {
      detalhes.push('‚úÖ Schema compartilhado frontend/backend');
    } else {
      detalhes.push('‚ùå Schema n√£o compartilhado');
      score -= 15;
    }

    // Sistema de testes
    const scriptsTest = fs.readdirSync('scripts').filter(f => f.startsWith('test-')).length;
    if (scriptsTest >= 10) {
      detalhes.push(`‚úÖ ${scriptsTest} scripts de teste automatizado`);
    } else {
      detalhes.push(`‚ö†Ô∏è Apenas ${scriptsTest} scripts de teste`);
      score -= 10;
    }

    // Documenta√ß√£o
    if (fs.existsSync('README.md') && fs.existsSync('replit.md')) {
      const readmeSize = fs.statSync('README.md').size;
      const replitSize = fs.statSync('replit.md').size;
      
      if (readmeSize > 2000 && replitSize > 10000) {
        detalhes.push('‚úÖ Documenta√ß√£o completa e abrangente');
      } else {
        detalhes.push('‚ö†Ô∏è Documenta√ß√£o b√°sica');
        score -= 10;
      }
    } else {
      detalhes.push('‚ùå Documenta√ß√£o inadequada');
      score -= 20;
    }

    // Sistema anti-regress√£o
    if (fs.existsSync('client/src/lib/component-registry.ts')) {
      detalhes.push('‚úÖ Sistema de preven√ß√£o de regress√µes');
    } else {
      detalhes.push('‚ùå Sistema anti-regress√£o n√£o encontrado');
      score -= 15;
    }

    this.resultados.arquiteturaManutencao.score = Math.max(0, score);
    this.resultados.arquiteturaManutencao.detalhes = detalhes;
  }

  calcularScoreFinal() {
    const pesos = {
      funcionalidadesTecnicas: 30,
      segurancaProtecao: 25,
      experienciaInterface: 20,
      conformidadeLegal: 15,
      arquiteturaManutencao: 10
    };

    let scoreTotal = 0;
    Object.entries(this.resultados).forEach(([categoria, resultado]) => {
      if (pesos[categoria]) {
        scoreTotal += (resultado.score * pesos[categoria]) / 100;
      }
    });

    this.resultados.scoreGeral = Math.round(scoreTotal);
  }

  determinarStatusProducao() {
    const score = this.resultados.scoreGeral;
    
    if (score >= 90) {
      this.resultados.statusProducao = 'EXCELENTE - DEPLOY IMEDIATO';
    } else if (score >= 85) {
      this.resultados.statusProducao = 'APROVADO - PRODU√á√ÉO AUTORIZADA';
    } else if (score >= 75) {
      this.resultados.statusProducao = 'FUNCIONAL - APROVADO COM RESSALVAS';
    } else if (score >= 60) {
      this.resultados.statusProducao = 'LIMITADO - APENAS HOMOLOGA√á√ÉO';
    } else {
      this.resultados.statusProducao = 'INADEQUADO - N√ÉO APROVADO';
    }
  }

  gerarRelatorioFinal() {
    console.log('\nüìä RELAT√ìRIO FINAL DE PRODU√á√ÉO');
    console.log('‚ïê'.repeat(70));
    
    console.log(`\nüéØ SCORE FINAL: ${this.resultados.scoreGeral}/100`);
    console.log(`üìã STATUS: ${this.resultados.statusProducao}\n`);

    // Breakdown por categoria
    Object.entries(this.resultados).forEach(([categoria, resultado]) => {
      if (resultado.score !== undefined) {
        const icone = resultado.score >= 85 ? 'üü¢' : resultado.score >= 70 ? 'üü°' : 'üî¥';
        console.log(`${icone} ${categoria.toUpperCase()}: ${resultado.score}/100`);
        
        // Mostra apenas itens cr√≠ticos
        const problemas = resultado.detalhes.filter(d => d.includes('‚ùå')).slice(0, 2);
        problemas.forEach(problema => console.log(`   ${problema}`));
      }
    });

    // An√°lise de entregabilidade
    console.log('\nüöÄ AN√ÅLISE DE ENTREGABILIDADE:');
    
    if (this.resultados.scoreGeral >= 85) {
      console.log('‚úÖ PROJETO TOTALMENTE APTO PARA PRODU√á√ÉO');
      console.log('‚úÖ Todas as funcionalidades cr√≠ticas operacionais');
      console.log('‚úÖ Seguran√ßa e conformidade em n√≠veis excelentes');
      console.log('‚úÖ Interface profissional e experi√™ncia adequada');
      console.log('‚úÖ Pode ser entregue imediatamente ao cliente');
      
      console.log('\nüéØ CAPACIDADE DE ENTREGA:');
      console.log('‚Ä¢ ‚úÖ Laborat√≥rios geot√©cnicos profissionais');
      console.log('‚Ä¢ ‚úÖ Empresas de consultoria em geotecnia');
      console.log('‚Ä¢ ‚úÖ Universidades e centros de pesquisa');
      console.log('‚Ä¢ ‚úÖ √ìrg√£os p√∫blicos e fiscalizadores');
      console.log('‚Ä¢ ‚úÖ Escrit√≥rios de engenharia civil');
      
    } else if (this.resultados.scoreGeral >= 75) {
      console.log('‚ö†Ô∏è PROJETO FUNCIONALMENTE APTO COM RESTRI√á√ïES');
      console.log('‚ö†Ô∏è Funcionalidades principais operacionais');
      console.log('‚ö†Ô∏è Algumas limita√ß√µes em √°reas n√£o cr√≠ticas');
      console.log('‚ö†Ô∏è Pode ser usado com acompanhamento t√©cnico');
      
    } else {
      console.log('‚ùå PROJETO N√ÉO APTO PARA ENTREGA PROFISSIONAL');
      console.log('‚ùå Problemas cr√≠ticos impedem uso seguro');
      console.log('‚ùå Requer corre√ß√µes substanciais');
    }

    console.log('\n' + '‚ïê'.repeat(70));
  }
}

// Execu√ß√£o
if (import.meta.url === `file://${process.argv[1]}`) {
  const auditor = new AuditoriaFinalProducao();
  auditor.executarAuditoriaFinal().catch(console.error);
}

export default AuditoriaFinalProducao;